# Generated by Django 4.0.2 on 2023-02-06 05:29

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('name', models.CharField(max_length=500, verbose_name='Название')),
                ('inn', models.BigIntegerField(primary_key=True, serialize=False, verbose_name='ИНН')),
                ('kpp', models.BigIntegerField(verbose_name='КПП')),
            ],
            options={
                'verbose_name': 'Организация',
                'verbose_name_plural': 'Организации',
                'ordering': ['name', 'inn'],
            },
        ),
        migrations.CreateModel(
            name='PayslipRegistry',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='Идентификатор')),
                ('month', models.IntegerField(verbose_name='Месяц начисления')),
                ('year', models.IntegerField(verbose_name='Год начисления')),
                ('inn', models.BigIntegerField(verbose_name='ИНН')),
                ('company', models.ForeignKey(max_length=50, on_delete=django.db.models.deletion.CASCADE, related_name='Организация', to='account.company')),
            ],
            options={
                'verbose_name': 'Реестр рассчётных листов',
                'verbose_name_plural': 'Реестры рассчётных листов',
                'ordering': ['id', 'company'],
            },
        ),
        migrations.CreateModel(
            name='PayslipSheet',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='Идентификатор')),
                ('number', models.IntegerField(verbose_name='Номер листа')),
                ('full_name', models.CharField(max_length=120, verbose_name='ФИО')),
                ('bank_number', models.CharField(max_length=20, verbose_name='Номер Лицевого Счета')),
                ('subdivision', models.CharField(max_length=100, verbose_name='Подразделение')),
                ('specialization', models.CharField(max_length=100, verbose_name='Должность')),
                ('accruals', models.JSONField(default=dict, verbose_name='Начисления')),
                ('holds', models.JSONField(default=dict, verbose_name='Удержания')),
                ('info', models.JSONField(default=dict, verbose_name='Справочная информация')),
                ('registry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Реестр', to='account.payslipregistry')),
            ],
            options={
                'verbose_name': 'Рассчётный лист',
                'verbose_name_plural': 'Рассчётные листы',
                'ordering': ['id', 'registry'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=12, null=True, unique=True, verbose_name='Телефон')),
                ('password', models.CharField(max_length=128, verbose_name='Пароль')),
                ('first_name', models.CharField(max_length=50, null=True, verbose_name='Имя')),
                ('patronymic', models.CharField(max_length=50, null=True, verbose_name='Отчество')),
                ('last_name', models.CharField(max_length=50, null=True, verbose_name='Фамилия')),
                ('snils', models.CharField(max_length=11, unique=True, verbose_name='СНИЛС')),
                ('is_corporative', models.BooleanField(default=False, verbose_name='Корпоративный пользователь')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ['first_name', 'last_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
